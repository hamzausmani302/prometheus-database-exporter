# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: CI Workflow

on:
  # workflow_dispatch:

  push:
    tags:
      - "*.*.*"

jobs:
  verify-tags:
    uses: ./.github/workflows/verify-tags.yaml
    with:
      branch: ${{ github.ref_name }}
      tagName: ${{ github.ref_name }}

  unit-testing:
    uses: ./.github/workflows/unit-testing.yaml
    needs: [verify-tags]

  integration-testing:
    needs: [unit-testing]
    uses: ./.github/workflows/integration-testing.yaml
    with:
      branch: ${{ github.ref_name }}

  build-docker-image:
    runs-on: ubuntu-latest
    needs: [integration-testing]
    environment: PROD_ENV
    steps:
      - name: Docker Setup Docker
        uses: docker/setup-docker-action@v4.4.0
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"
      - name: Build Image
        run: |
          echo "Building docker image"
          echo ${{ vars.DOCKER_USERNAME }}
          TAG_NAME=$(cat .ver)
          git submodule update --init --recursive
          docker build -t hamzausmani021/prometheus-database-exporter:$TAG_NAME . --progress=plain
          docker login -u ${{ vars.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} 
          docker push hamzausmani021/prometheus-database-exporter:$TAG_NAME
          echo "Done bulding docker image and push"

  # build-executable:
  #   runs-on: ubuntu-latest
  #   needs: [integration-testing]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "1.22"
  #     - run: git submodule update --init --recursive
  #     - name: Build Exporter
  #       run: |
  #         echo "Building collector binary package"
  #         TAG_NAME=$(cat .ver)
  #         export GOOS=linux
  #         go build -o ./bin/standalone-$TAG_NAME ./cmd/standalone/
  #         echo "Done bulding executable"
  #     - name: Upload a Build Artifact
  #       uses: actions/upload-artifact@v4.6.2
  #       with:
  #         # Artifact name
  #         name: artifact-build
  #         # A file, directory or wildcard pattern that describes what to upload
  #         path: ./bin

  # push-executable-to-s3:
  #   runs-on: ubuntu-latest
  #   needs: [build-executable]
  #   environment: PROD_ENV
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
  #     AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Download a Build Artifact
  #       uses: actions/download-artifact@v5.0.0
  #       with:
  #         # Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.
  #         name: artifact-build
  #         # Destination path. Supports basic tilde expansion. Defaults to $GITHUB_WORKSPACE
  #         path: /tmp/executable # optional
  #     - name: Pushing executbale to S3
  #       run: |
  #         TAG_NAME=$(cat .ver)
  #         ls -al /tmp/executable
  #         BINARY_NAME=standalone-$TAG_NAME
  #         echo "Uploading $BINARY_NAME to S3"
  #         CREDS=$(aws sts assume-role --role-arn ${{ vars.ASSUME_ROLE_ARN }} --role-session-name session)
  #         PROFILE="assumed-role"
  #         aws configure set aws_access_key_id     "$(echo $CREDS | jq -r '.Credentials.AccessKeyId')"     --profile $PROFILE
  #         aws configure set aws_secret_access_key "$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" --profile $PROFILE
  #         aws configure set aws_session_token     "$(echo $CREDS | jq -r '.Credentials.SessionToken')"    --profile $PROFILE
  #         aws s3 cp /tmp/executable/$BINARY_NAME s3://database-prometheus-exporter/binaries/$BINARY_NAME --profile $PROFILE
  #         echo "Executable deployed to S3"
