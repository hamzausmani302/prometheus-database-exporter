enableApi: true
enableCollector: false
schedulerConfig:
  storage: "memory" # enum [redis, sqlite, postgres, memory]
  metadata:
    connectionDetails: {}
storeConfig:
  type: "redis" # enum [Local, Redis] can add more implementations later by implemnting the DataStore interface
  metadata:
    connectionDetails:
      host: localhost
      port: 6379
      password: TiyNzDdjvY
collectorConfig:
  type: prometheus # enum [Prometheus] can add more implementations later by implemnting the ICollector interface
  metadata: {}
serverConfig:
  port: 8080
  numWorkers: 5
dataSourceConfig:
  - name: postgres-datastore
    type: SQL # enum [MySQL, PostgreSQL] can add more implementations later by implemnting the IDataSource interface
    metadata:
      connectionDetails:
        host: localhost
        port: 5432
        username: postgres
        password: password
        connectionString: "postgresql://postgres:password@localhost:5432/id3_dashboard?sslmode=disable"

queries:
  - name: taxi_rides
    dataSource: postgres-datastore
    query: "select 'test1' AS well_id, 10 AS total_wells from t_well where to_load = false"
    queryRefreshTime: 30
    queryTimeout: 5
    labels:
      - name: database
        staticValue: id3_dashboard1
      - name: well_id
        columnName: well_id
    metrics:
      - name: total_wells # metric will be taxi_rides_total_active_rides in prometheus
        type: GAUGE
        help: "Total number of active rides"
        column: total_wells
